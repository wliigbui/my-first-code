#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

//看到Person2声明
template<class T1, class T2>class Person2;
//让编译器先看类内函数模板声明
template<class T1, class T2>void printPerson2(Person2<T1, T2>& p);

template<class T1,class T2>
class Person
{
	/*友元函数类内实现
	全局函数*/
	friend void printPerson(Person<T1,T2>& p)
	{
		cout << "姓名： " << p.m_Name << "年龄： " << p.m_Age << endl;
	}
public:
	Person(T1 name, T2 age)
	{
		this->m_Age = age;
		this->m_Name = name;
	}

private:
	T1 m_Name;
	T2 m_Age;
};


void test01()
{
	Person<string, int> p1("悟空", 100);
	printPerson(p1);
}

template<class T1, class T2>
class Person2
{		
	friend void printPerson2<>(Person2<T1, T2>& p);
public:
	Person2(T1 name, T2 age)
	{
		this->m_Age = age;
		this->m_Name = name;
	}

private:
	T1 m_Name;
	T2 m_Age;
};

//类外实现
template<class T1,class T2>
 void printPerson2(Person2<T1, T2>& p)
{
	cout << "姓名： " << p.m_Name << "年龄： " << p.m_Age << endl;
}

 void test02()
 {
	 Person2<string, int> p2("八戒", 90);
	 printPerson2(p2);
 }


int main()
{
	test01();
	test02();
	return EXIT_SUCCESS;
}
