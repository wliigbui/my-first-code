#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
using namespace std;

//容器  vector
#include<vector>

//算法
#include<algorithm>

//迭代器   遍历功能  用指针理解
//普通的指针也算一种迭代器
void test01()
{
	int array[5] = { 1,3,5,6,8 };

	int* p = array;
	for (int i = 0; i < 5; i++)
	{
		//cout << array[i] << endl;
		cout << *(p++) << endl;
	}
}

void myPrint(int v)
{
	cout << v << endl;
}

void test02()
{
	//声明容器  存放int类型数据
	vector<int> v;

	//向容器中加入数据
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//遍历容器中的数据
	//利用迭代器
	//指向容器的起始位置
	vector<int>::iterator itBegin = v.begin();
	//指向容器的容器的最后一个位置的下一个地址
	vector<int>::iterator itEnd = v.end();

	//遍历1
	/*while (itBegin != itEnd)
	{
		cout << *itBegin << endl;
		itBegin++;
	}*/

	//遍历2
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << endl;
	}

	//遍历3
	for_each(v.begin(), v.end(), myPrint);
}

//操作自定义数据类型
class Person
{
public:
	Person(string name, int age)
	{
		this->m_Age = age;
		this->m_Name = name;
	}

	string m_Name;
	int m_Age;
};

void test03()
{
	
	Person p1("兔兔", 4);
	Person p2("猪猪", 5);
	Person p3("Keeper", 19);
	
	vector<Person> v;
	v.push_back(p1);
	v.push_back(p2);
	v.push_back(p3);

	//遍历
	for (vector<Person>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "姓名：" << (*it).m_Name << "	年龄：" << (*it).m_Age << endl;
	}
}

//存放自定义数据类型的指针
void test04()
{
	Person p1("兔兔", 4);
	Person p2("猪猪", 5);
	Person p3("Keeper", 19);

	vector<Person*> v;
	v.push_back(&p1);
	v.push_back(&p2);
	v.push_back(&p3);

	//遍历
	for (vector<Person*>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout<< "姓名：" << (*it)->m_Name << "	年龄：" << (*it)->m_Age << endl;
	}
}

//容器嵌套容器
void test05()
{
	vector<vector<int>> v;

	vector<int> v1;
	vector<int> v2;
	vector<int> v3;

	for (int i = 0; i < 5 ; i++)
	{
		v1.push_back(i);
		v2.push_back(i + 10);
		v3.push_back(i + 100);
	}

	//将小容器放到大容器
	v.push_back(v1);
	v.push_back(v2);
	v.push_back(v3);

	//遍历
	for (vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++)
	{
		for (vector<int>::iterator vit = (*it).begin(); vit != (*it).end(); vit++)
		{
			cout << *vit << "  ";
		}
		cout << endl;
	}
}
int main()
{
	//test01();
	//test02();
	//test03();
	//test04();
	test05();
	return EXIT_SUCCESS;
}
