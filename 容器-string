#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<string>
#include<stdexcept>
using namespace std;


//strint构造函数
//string();//创建一个空字符串 如：string str;
//string(const string& str); //使用string对象初始化另一个string对象
//string(const char* s); //使用字符串s初始化
//string(int n,char c); //使用n个字符c初始化


void test01()
{
	string str;//默认构造
	string str2(str);//拷贝构造
	string str3 = str;
	string str4 = "abcd";
	string str5(10, 'a');

	cout << str4 << endl;
	cout << str5 << endl;

	//基本赋值
	str = "hello";
	str2 = str4;
	str3.assign("abcde", 4); //把字符串的前n个字符赋值给str3

	cout << str3 << endl;

	string str6;
	str6.assign(str, 1, 3);//从字符串的第1个字符（从0开始数）开始赋值三个字符给str6
	cout << str6 << endl;
}


//string存取字符
//char& operator[](int n);
//char& at(int n);

void test02()
{
	string s = "hello world";

	//for (int i = 0; i < s.size(); i++)
	//{
	//	//cout << s[i];
	//	cout << s.at(i);
	//}

	//[]访问越界 直接挂掉 a则会抛出异常
	try
	{
		//cout << s[100] << endl;
		cout << s.at(100) << endl;
	}
	catch (out_of_range& e)
	{
		cout << e.what() << endl;
	}
	catch (...)
	{
		cout << "越界异常" << endl;
	}
}

void test03()
{
	//拼接
	string s1 = "我";
	string s2("爱北京");
	s1 += s2;
	cout << s1 << endl;

	s1.append("天安门");
	cout << s1 << endl;

	//查找
	string s = "abcdebc";
	int pos = s.find("bc"); //找到返回位置,找不到返回-1

	cout << "pos= " << pos << endl;

	int pos2 = s.rfind("bc");//从后向前查找，但位置不变
	cout << "pos2= " << pos2 << endl;

	//替换
	string s3 = "hello";
	s3.replace(1, 3, "；；；；");//从第一个字符开始数三个字符替换成；；；；| s3变成: he；；；；o
	cout << s3 << endl;
}

void test04()
{
	string s1 = "abc";
	string s2 = "abc";

	if (s1.compare(s2) == 0)
	{
		cout << "s1 = s2";
	}
	else if (s1.compare(s2) == 1)
	{
		cout << "s1大于s2" << endl;
	}
	else
	{
		cout << "s1小于s2" << endl;
	}
}

void test05()
{
	string s1 = "abcde";
	string s2 = s1.substr(1, 3);
	cout << "s2= " << s2 << endl;

	//需求 查找一个右键的用户名
	string email = "djl@sina.con";
	int pos = email.find("@");
	cout << "pos= " << pos << endl;

	string userNmae = email.substr(0, pos);
	cout << "用户名为: " << userNmae << endl;
}

void test06()
{
	string s1 = "hello";
	s1.insert(1, "111");  //插入
	cout << s1 << endl;

	s1.erase(1, 3);
	cout << s1 << endl;   //删除
}


void func(string s)
{
	cout << s << endl;
}

void func2(const char* s)
{
	cout << s << endl;
}
void test07()
{
	string s1 = "abc";
	//string -> const char*

	const char* p = s1.c_str();
	
	func(p); //const char* 隐式类型转换为string

	//const char* -> string 
	string s2(p);
	//func2(s2); //无法从string 转换为 char*
}

void test08()
{
	string s = "abcdefg";
	char& a = s[0];
	char& b = s[1];
	a = '1';
	b = '2';
	cout << s << endl;
	cout << (int*)s.c_str() << endl;

	s = "pppppppppppppppppppppppp";  //需要重新分配内存

	//a = '1';
	//b = '2';
	
	cout << s << endl;
	cout << (int*)s.c_str() << endl;

}

//写一个函数 函数内部将string字符串中的所有小写字符都变为大写自身
void test09()
{
	string s = "abcdefg";

	for (int i = 0; i < s.size(); i++)
	{
		s[i] = toupper(s[i]);//变大写
		
		s[i] = tolower(s[i]);//变小写

		cout << s[i];
	}

	
}
int main()
{
	//test01();
	//test02();
	//test03();
	//test04();
	//test05();
	//test06();
	//test07();
	//test08();
	test09();
	return EXIT_SUCCESS;
}
